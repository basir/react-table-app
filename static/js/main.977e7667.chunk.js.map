{"version":3,"sources":["ProductTable.js","App.js","reportWebVitals.js","index.js"],"names":["ProductTable","columns","data","useTable","useGroupBy","useSortBy","useExpanded","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","canGroupBy","id","getGroupByToggleProps","isGrouped","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","getToggleRowExpandedProps","isExpanded","subRows","length","isAggregated","isPlaceholder","App","useState","products","setProducts","loading","setLoading","useEffect","a","axios","console","log","fetchProducts","useMemo","Header","accessor","aggregate","Aggregated","value","Math","round","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"uQAGe,SAASA,EAAT,GAA0C,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KAAQ,EAEpDC,mBAAS,CAAEF,UAASC,QAAQE,aAAYC,YAAWC,eAD7CC,EAD8C,EAC9CA,cAAeC,EAD+B,EAC/BA,kBAAmBC,EADY,EACZA,aAAcC,EADF,EACEA,KAAMC,EADR,EACQA,WAG9D,OACE,kDAAWJ,KAAX,cACE,gCACGE,EAAaG,KAAI,SAACC,GAAD,OAChB,8CAAQA,EAAYC,uBAApB,aACGD,EAAYE,QAAQH,KAAI,SAACI,GAAD,OACvB,+CAAQA,EAAOC,eAAeD,EAAOE,yBAArC,cACGF,EAAOG,YAA4B,aAAdH,EAAOI,GAC3B,iDAAUJ,EAAOK,yBAAjB,cACG,IACAL,EAAOM,UAAY,KAAO,SAE3B,KAEHN,EAAOO,OAAO,UACf,+BACGP,EAAOQ,SAAYR,EAAOS,aAAe,UAAO,UAAQ,oBAOrE,iDAAWjB,KAAX,aACGE,EAAKE,KAAI,SAACc,GAET,OADAf,EAAWe,GAET,8CAAQA,EAAIC,eAAZ,aACGD,EAAIE,MAAMhB,KAAI,SAACiB,GACd,OACE,8CAAQA,EAAKC,gBAAb,aACGD,EAAKP,UAEJ,qCACE,gDAAUI,EAAIK,6BAAd,aACGL,EAAIM,WAAa,IAAM,OAClB,IACPH,EAAKN,OAAO,QAJf,KAI0BG,EAAIO,QAAQC,OAJtC,OAMEL,EAAKM,aAGPN,EAAKN,OAAO,cACVM,EAAKO,cAAgB,KAEvBP,EAAKN,OAAO,2BCyBnBc,MAzEf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,KAIbC,qBAAU,YACW,uCAAG,8BAAAC,EAAA,6DACpBF,GAAW,GADS,kBAGKG,IAAM,yCAHX,gBAGV3C,EAHU,EAGVA,KACRsC,EAAYtC,GACZwC,GAAW,GALO,kDAOlBF,EAAY,IACZM,QAAQC,IAAR,MACAL,GAAW,GATO,0DAAH,qDAYnBM,KACC,IACH,IAAM/C,EAAUgD,mBACd,iBAAM,CACJ,CACEC,OAAQ,WACRC,SAAU,YAEZ,CACED,OAAQ,KACRC,SAAU,MAEZ,CACED,OAAQ,OACRC,SAAU,QAEZ,CACED,OAAQ,QACRC,SAAU,QACVC,UAAW,UACXC,WAAY,gBAAGC,EAAH,EAAGA,MAAH,gBAAkBC,KAAKC,MAAc,IAARF,GAAe,IAA5C,YAEd,CACEJ,OAAQ,iBACRC,SAAU,eACVC,UAAW,MACXC,WAAY,gBAAGC,EAAH,EAAGA,MAAH,gBAAkBA,EAAlB,YAEd,CACEJ,OAAQ,QACRC,SAAU,SAEZ,CACED,OAAQ,SACRC,SAAU,SACVC,UAAW,UACXC,WAAY,gBAAGC,EAAH,EAAGA,MAAH,gBAAkBC,KAAKC,MAAc,IAARF,GAAe,IAA5C,YAEd,CACEJ,OAAQ,cACRC,SAAU,kBAGd,IAEF,OACE,qBAAKM,UAAU,kBAAf,SACGhB,EACC,uDAEA,cAACzC,EAAD,CAAcC,QAASA,EAASC,KAAMqC,OC3D/BmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAAS5C,OACP,cAAC,IAAM6C,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.977e7667.chunk.js","sourcesContent":["import React from 'react';\nimport { useExpanded, useGroupBy, useSortBy, useTable } from 'react-table';\n\nexport default function ProductTable({ columns, data }) {\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable({ columns, data }, useGroupBy, useSortBy, useExpanded);\n\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map((headerGroup) => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column) => (\n              <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                {column.canGroupBy && column.id === 'category' ? (\n                  <span {...column.getGroupByToggleProps()}>\n                    {' '}\n                    {column.isGrouped ? '+ ' : '- '}\n                  </span>\n                ) : null}\n\n                {column.render('Header')}\n                <span>\n                  {column.isSorted ? (column.isSortedDesc ? ' ▼' : ' ▲') : ''}\n                </span>\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row) => {\n          prepareRow(row);\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map((cell) => {\n                return (\n                  <td {...cell.getCellProps()}>\n                    {cell.isGrouped ? (\n                      // If it's a grouped cell, add an expander and row count\n                      <>\n                        <span {...row.getToggleRowExpandedProps()}>\n                          {row.isExpanded ? '-' : '+'}\n                        </span>{' '}\n                        {cell.render('Cell')} ({row.subRows.length})\n                      </>\n                    ) : cell.isAggregated ? (\n                      // If the cell is aggregated, use the Aggregated\n                      // renderer for cell\n                      cell.render('Aggregated')\n                    ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                      // Otherwise, just render the regular cell\n                      cell.render('Cell')\n                    )}\n                  </td>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n","import axios from 'axios';\nimport { useEffect, useMemo, useState } from 'react';\nimport ProductTable from './ProductTable';\n\nfunction App() {\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchProducts = async () => {\n      setLoading(true);\n      try {\n        const { data } = await axios('https://basir.github.io/products.json');\n        setProducts(data);\n        setLoading(false);\n      } catch (err) {\n        setProducts([]);\n        console.log(err);\n        setLoading(false);\n      }\n    };\n    fetchProducts();\n  }, []);\n  const columns = useMemo(\n    () => [\n      {\n        Header: 'Category',\n        accessor: 'category',\n      },\n      {\n        Header: 'ID',\n        accessor: 'id',\n      },\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Price',\n        accessor: 'price',\n        aggregate: 'average',\n        Aggregated: ({ value }) => `${Math.round(value * 100) / 100} (avg)`,\n      },\n      {\n        Header: 'Count In Stock',\n        accessor: 'countInStock',\n        aggregate: 'sum',\n        Aggregated: ({ value }) => `${value} (sum)`,\n      },\n      {\n        Header: 'Brand',\n        accessor: 'brand',\n      },\n      {\n        Header: 'Rating',\n        accessor: 'rating',\n        aggregate: 'average',\n        Aggregated: ({ value }) => `${Math.round(value * 100) / 100} (avg)`,\n      },\n      {\n        Header: 'Description',\n        accessor: 'description',\n      },\n    ],\n    []\n  );\n  return (\n    <div className=\"table-container\">\n      {loading ? (\n        <span>Loading Products...</span>\n      ) : (\n        <ProductTable columns={columns} data={products} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}